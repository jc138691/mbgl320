package lapack4j.lapack2j.output;
/**
 * dmitry.a.konovalov@gmail.com,dmitry.konovalov@jcu.edu.com,17/10/11,1:17 PM
 */

public class DSTEMR { //SUBROUTINE DSTEMR( JOBZ, RANGE, N, D, E, VL, VU, IL, IU,M, W, Z, LDZ, NZC, ISUPPZ, TRYRAC, WORK, LWORK,IWORK, LIWORK, INFO )
//public static void DSTEMR( JOBZ, RANGE, N, D, E, VL, VU, IL, IU,M, W, Z, LDZ, NZC, ISUPPZ, TRYRAC, WORK, LWORK,IWORK, LIWORK, INFO ) { //SUBROUTINE DSTEMR( JOBZ, RANGE, N, D, E, VL, VU, IL, IU,M, W, Z, LDZ, NZC, ISUPPZ, TRYRAC, WORK, LWORK,IWORK, LIWORK, INFO )
////IMPLICIT NONE
//char JOBZ, RANGE; //CHARACTER          JOBZ, RANGE
//boolean TRYRAC; //LOGICAL            TRYRAC
//int IL, INFO, IU, LDZ, NZC, LIWORK, LWORK, M, N; //INTEGER            IL, INFO, IU, LDZ, NZC, LIWORK, LWORK, M, N
//double VL, VU; //DOUBLE PRECISION VL, VU
//int ISUPPZ( * ), IWORK( * ); //INTEGER            ISUPPZ( * ), IWORK( * )
//double D( * ), E( * ), W( * ), WORK( * ); //DOUBLE PRECISION   D( * ), E( * ), W( * ), WORK( * )
//double Z( LDZ, * ); //DOUBLE PRECISION   Z( LDZ, * )
//double ZERO, ONE, FOUR, MINRGP; //DOUBLE PRECISION   ZERO, ONE, FOUR, MINRGP
//PARAMETER          ( ZERO = 0.0D0, ONE = 1.0D0,FOUR = 4.0D0,MINRGP = 1.0D-3 ); //PARAMETER          ( ZERO = 0.0D0, ONE = 1.0D0,FOUR = 4.0D0,MINRGP = 1.0D-3 )
//boolean ALLEIG, INDEIG, LQUERY, VALEIG, WANTZ, ZQUERY; //LOGICAL            ALLEIG, INDEIG, LQUERY, VALEIG, WANTZ, ZQUERY
//int I, IBEGIN, IEND, IFIRST, IIL, IINDBL, IINDW,IINDWK, IINFO, IINSPL, IIU, ILAST, IN, INDD,INDE2, INDERR, INDGP, INDGRS, INDWRK, ITMP,ITMP2, J, JBLK, JJ, LIWMIN, LWMIN, NSPLIT,NZCMIN, OFFSET, WBEGIN, WEND; //INTEGER            I, IBEGIN, IEND, IFIRST, IIL, IINDBL, IINDW,IINDWK, IINFO, IINSPL, IIU, ILAST, IN, INDD,INDE2, INDERR, INDGP, INDGRS, INDWRK, ITMP,ITMP2, J, JBLK, JJ, LIWMIN, LWMIN, NSPLIT,NZCMIN, OFFSET, WBEGIN, WEND
//double BIGNUM, CS, EPS, PIVMIN, R1, R2, RMAX, RMIN,RTOL1, RTOL2, SAFMIN, SCALE, SMLNUM, SN,THRESH, TMP, TNRM, WL, WU; //DOUBLE PRECISION   BIGNUM, CS, EPS, PIVMIN, R1, R2, RMAX, RMIN,RTOL1, RTOL2, SAFMIN, SCALE, SMLNUM, SN,THRESH, TMP, TNRM, WL, WU
//boolean LSAME; //LOGICAL            LSAME
//double DLAMCH, DLANST; //DOUBLE PRECISION   DLAMCH, DLANST
//EXTERNAL           LSAME, DLAMCH, DLANST; //EXTERNAL           LSAME, DLAMCH, DLANST
//EXTERNAL           DCOPY, DLAE2, DLAEV2, DLARRC, DLARRE, DLARRJ,DLARRR, DLARRV, DLASRT, DSCAL, DSWAP, XERBLA; //EXTERNAL           DCOPY, DLAE2, DLAEV2, DLARRC, DLARRE, DLARRJ,DLARRR, DLARRV, DLASRT, DSCAL, DSWAP, XERBLA
//INTRINSIC          MAX, MIN, SQRT; //INTRINSIC          MAX, MIN, SQRT
//WANTZ = LSAME( JOBZ, 'V' ); //WANTZ = LSAME( JOBZ, 'V' )
//ALLEIG = LSAME( RANGE, 'A' ); //ALLEIG = LSAME( RANGE, 'A' )
//VALEIG = LSAME( RANGE, 'V' ); //VALEIG = LSAME( RANGE, 'V' )
//INDEIG = LSAME( RANGE, 'I' ); //INDEIG = LSAME( RANGE, 'I' )
//LQUERY = ( ( LWORK.EQ.-1 ).OR.( LIWORK.EQ.-1 ) ); //LQUERY = ( ( LWORK.EQ.-1 ).OR.( LIWORK.EQ.-1 ) )
//ZQUERY = ( NZC.EQ.-1 ); //ZQUERY = ( NZC.EQ.-1 )
//IF( WANTZ ) THEN; //IF( WANTZ ) THEN
//LWMIN = 18*N; //LWMIN = 18*N
//LIWMIN = 10*N; //LIWMIN = 10*N
//ELSE; //ELSE
//LWMIN = 12*N; //LWMIN = 12*N
//LIWMIN = 8*N; //LIWMIN = 8*N
//} // ENDIF
//WL = ZERO; //WL = ZERO
//WU = ZERO; //WU = ZERO
//IIL = 0; //IIL = 0
//IIU = 0; //IIU = 0
//IF( VALEIG ) THEN; //IF( VALEIG ) THEN
//WL = VL; //WL = VL
//WU = VU; //WU = VU
//ELSEIF( INDEIG ) THEN; //ELSEIF( INDEIG ) THEN
//IIL = IL; //IIL = IL
//IIU = IU; //IIU = IU
//} // ENDIF
//INFO = 0; //INFO = 0
//IF( .NOT.( WANTZ .OR. LSAME( JOBZ, 'N' ) ) ) THEN; //IF( .NOT.( WANTZ .OR. LSAME( JOBZ, 'N' ) ) ) THEN
//INFO = -1; //INFO = -1
//ELSE IF( .NOT.( ALLEIG .OR. VALEIG .OR. INDEIG ) ) THEN; //ELSE IF( .NOT.( ALLEIG .OR. VALEIG .OR. INDEIG ) ) THEN
//INFO = -2; //INFO = -2
//ELSE IF( N.LT.0 ) THEN; //ELSE IF( N.LT.0 ) THEN
//INFO = -3; //INFO = -3
//ELSE IF( VALEIG .AND. N.GT.0 .AND. WU.LE.WL ) THEN; //ELSE IF( VALEIG .AND. N.GT.0 .AND. WU.LE.WL ) THEN
//INFO = -7; //INFO = -7
//ELSE IF( INDEIG .AND. ( IIL.LT.1 .OR. IIL.GT.N ) ) THEN; //ELSE IF( INDEIG .AND. ( IIL.LT.1 .OR. IIL.GT.N ) ) THEN
//INFO = -8; //INFO = -8
//ELSE IF( INDEIG .AND. ( IIU.LT.IIL .OR. IIU.GT.N ) ) THEN; //ELSE IF( INDEIG .AND. ( IIU.LT.IIL .OR. IIU.GT.N ) ) THEN
//INFO = -9; //INFO = -9
//ELSE IF( LDZ.LT.1 .OR. ( WANTZ .AND. LDZ.LT.N ) ) THEN; //ELSE IF( LDZ.LT.1 .OR. ( WANTZ .AND. LDZ.LT.N ) ) THEN
//INFO = -13; //INFO = -13
//ELSE IF( LWORK.LT.LWMIN .AND. .NOT.LQUERY ) THEN; //ELSE IF( LWORK.LT.LWMIN .AND. .NOT.LQUERY ) THEN
//INFO = -17; //INFO = -17
//ELSE IF( LIWORK.LT.LIWMIN .AND. .NOT.LQUERY ) THEN; //ELSE IF( LIWORK.LT.LIWMIN .AND. .NOT.LQUERY ) THEN
//INFO = -19; //INFO = -19
//} // END IF
//SAFMIN = DLAMCH( 'Safe minimum' ); //SAFMIN = DLAMCH( 'Safe minimum' )
//EPS = DLAMCH( 'Precision' ); //EPS = DLAMCH( 'Precision' )
//SMLNUM = SAFMIN / EPS; //SMLNUM = SAFMIN / EPS
//BIGNUM = ONE / SMLNUM; //BIGNUM = ONE / SMLNUM
//RMIN = SQRT( SMLNUM ); //RMIN = SQRT( SMLNUM )
//RMAX = MIN( SQRT( BIGNUM ), ONE / SQRT( SQRT( SAFMIN ) ) ); //RMAX = MIN( SQRT( BIGNUM ), ONE / SQRT( SQRT( SAFMIN ) ) )
//IF( INFO.EQ.0 ) THEN; //IF( INFO.EQ.0 ) THEN
//WORK( 1 ) = LWMIN; //WORK( 1 ) = LWMIN
//IWORK( 1 ) = LIWMIN; //IWORK( 1 ) = LIWMIN
//IF( WANTZ .AND. ALLEIG ) THEN; //IF( WANTZ .AND. ALLEIG ) THEN
//NZCMIN = N; //NZCMIN = N
//ELSE IF( WANTZ .AND. VALEIG ) THEN; //ELSE IF( WANTZ .AND. VALEIG ) THEN
//CALL DLARRC( 'T', N, VL, VU, D, E, SAFMIN,NZCMIN, ITMP, ITMP2, INFO ); //CALL DLARRC( 'T', N, VL, VU, D, E, SAFMIN,NZCMIN, ITMP, ITMP2, INFO )
//ELSE IF( WANTZ .AND. INDEIG ) THEN; //ELSE IF( WANTZ .AND. INDEIG ) THEN
//NZCMIN = IIU-IIL+1; //NZCMIN = IIU-IIL+1
//ELSE; //ELSE
//NZCMIN = 0; //NZCMIN = 0
//} // ENDIF
//IF( ZQUERY .AND. INFO.EQ.0 ) THEN; //IF( ZQUERY .AND. INFO.EQ.0 ) THEN
//Z( 1,1 ) = NZCMIN; //Z( 1,1 ) = NZCMIN
//ELSE IF( NZC.LT.NZCMIN .AND. .NOT.ZQUERY ) THEN; //ELSE IF( NZC.LT.NZCMIN .AND. .NOT.ZQUERY ) THEN
//INFO = -14; //INFO = -14
//} // END IF
//} // END IF
//IF( INFO.NE.0 ) THEN; //IF( INFO.NE.0 ) THEN
//CALL XERBLA( 'DSTEMR', -INFO ); //CALL XERBLA( 'DSTEMR', -INFO )
//} // RETURN
//ELSE IF( LQUERY .OR. ZQUERY ) THEN; //ELSE IF( LQUERY .OR. ZQUERY ) THEN
//} // RETURN
//} // END IF
//M = 0; //M = 0
//IF( N.EQ.0 )RETURN; //IF( N.EQ.0 )RETURN
//IF( N.EQ.1 ) THEN; //IF( N.EQ.1 ) THEN
//IF( ALLEIG .OR. INDEIG ) THEN; //IF( ALLEIG .OR. INDEIG ) THEN
//M = 1; //M = 1
//W( 1 ) = D( 1 ); //W( 1 ) = D( 1 )
//ELSE; //ELSE
//IF( WL.LT.D( 1 ) .AND. WU.GE.D( 1 ) ) THEN; //IF( WL.LT.D( 1 ) .AND. WU.GE.D( 1 ) ) THEN
//M = 1; //M = 1
//W( 1 ) = D( 1 ); //W( 1 ) = D( 1 )
//} // END IF
//} // END IF
//IF( WANTZ.AND.(.NOT.ZQUERY) ) THEN; //IF( WANTZ.AND.(.NOT.ZQUERY) ) THEN
//Z( 1, 1 ) = ONE; //Z( 1, 1 ) = ONE
//ISUPPZ(1) = 1; //ISUPPZ(1) = 1
//ISUPPZ(2) = 1; //ISUPPZ(2) = 1
//} // END IF
//} // RETURN
//} // END IF
//IF( N.EQ.2 ) THEN; //IF( N.EQ.2 ) THEN
//IF( .NOT.WANTZ ) THEN; //IF( .NOT.WANTZ ) THEN
//CALL DLAE2( D(1), E(1), D(2), R1, R2 ); //CALL DLAE2( D(1), E(1), D(2), R1, R2 )
//ELSE IF( WANTZ.AND.(.NOT.ZQUERY) ) THEN; //ELSE IF( WANTZ.AND.(.NOT.ZQUERY) ) THEN
//CALL DLAEV2( D(1), E(1), D(2), R1, R2, CS, SN ); //CALL DLAEV2( D(1), E(1), D(2), R1, R2, CS, SN )
//} // END IF
//IF( ALLEIG.OR.(VALEIG.AND.(R2.GT.WL).AND.(R2.LE.WU)).OR.(INDEIG.AND.(IIL.EQ.1)) ) THEN; //IF( ALLEIG.OR.(VALEIG.AND.(R2.GT.WL).AND.(R2.LE.WU)).OR.(INDEIG.AND.(IIL.EQ.1)) ) THEN
//M = M+1; //M = M+1
//W( M ) = R2; //W( M ) = R2
//IF( WANTZ.AND.(.NOT.ZQUERY) ) THEN; //IF( WANTZ.AND.(.NOT.ZQUERY) ) THEN
//Z( 1, M ) = -SN; //Z( 1, M ) = -SN
//Z( 2, M ) = CS; //Z( 2, M ) = CS
//IF (SN.NE.ZERO) THEN; //IF (SN.NE.ZERO) THEN
//IF (CS.NE.ZERO) THEN; //IF (CS.NE.ZERO) THEN
//ISUPPZ(2*M-1) = 1; //ISUPPZ(2*M-1) = 1
//ISUPPZ(2*M) = 2; //ISUPPZ(2*M) = 2
//ELSE; //ELSE
//ISUPPZ(2*M-1) = 1; //ISUPPZ(2*M-1) = 1
//ISUPPZ(2*M) = 1; //ISUPPZ(2*M) = 1
//} // END IF
//ELSE; //ELSE
//ISUPPZ(2*M-1) = 2; //ISUPPZ(2*M-1) = 2
//ISUPPZ(2*M) = 2; //ISUPPZ(2*M) = 2
//} // END IF
//} // ENDIF
//} // ENDIF
//IF( ALLEIG.OR.(VALEIG.AND.(R1.GT.WL).AND.(R1.LE.WU)).OR.(INDEIG.AND.(IIU.EQ.2)) ) THEN; //IF( ALLEIG.OR.(VALEIG.AND.(R1.GT.WL).AND.(R1.LE.WU)).OR.(INDEIG.AND.(IIU.EQ.2)) ) THEN
//M = M+1; //M = M+1
//W( M ) = R1; //W( M ) = R1
//IF( WANTZ.AND.(.NOT.ZQUERY) ) THEN; //IF( WANTZ.AND.(.NOT.ZQUERY) ) THEN
//Z( 1, M ) = CS; //Z( 1, M ) = CS
//Z( 2, M ) = SN; //Z( 2, M ) = SN
//IF (SN.NE.ZERO) THEN; //IF (SN.NE.ZERO) THEN
//IF (CS.NE.ZERO) THEN; //IF (CS.NE.ZERO) THEN
//ISUPPZ(2*M-1) = 1; //ISUPPZ(2*M-1) = 1
//ISUPPZ(2*M) = 2; //ISUPPZ(2*M) = 2
//ELSE; //ELSE
//ISUPPZ(2*M-1) = 1; //ISUPPZ(2*M-1) = 1
//ISUPPZ(2*M) = 1; //ISUPPZ(2*M) = 1
//} // END IF
//ELSE; //ELSE
//ISUPPZ(2*M-1) = 2; //ISUPPZ(2*M-1) = 2
//ISUPPZ(2*M) = 2; //ISUPPZ(2*M) = 2
//} // END IF
//} // ENDIF
//} // ENDIF
//} // RETURN
//} // END IF
//INDGRS = 1; //INDGRS = 1
//INDERR = 2*N + 1; //INDERR = 2*N + 1
//INDGP = 3*N + 1; //INDGP = 3*N + 1
//INDD = 4*N + 1; //INDD = 4*N + 1
//INDE2 = 5*N + 1; //INDE2 = 5*N + 1
//INDWRK = 6*N + 1; //INDWRK = 6*N + 1
//IINSPL = 1; //IINSPL = 1
//IINDBL = N + 1; //IINDBL = N + 1
//IINDW = 2*N + 1; //IINDW = 2*N + 1
//IINDWK = 3*N + 1; //IINDWK = 3*N + 1
//SCALE = ONE; //SCALE = ONE
//TNRM = DLANST( 'M', N, D, E ); //TNRM = DLANST( 'M', N, D, E )
//IF( TNRM.GT.ZERO .AND. TNRM.LT.RMIN ) THEN; //IF( TNRM.GT.ZERO .AND. TNRM.LT.RMIN ) THEN
//SCALE = RMIN / TNRM; //SCALE = RMIN / TNRM
//ELSE IF( TNRM.GT.RMAX ) THEN; //ELSE IF( TNRM.GT.RMAX ) THEN
//SCALE = RMAX / TNRM; //SCALE = RMAX / TNRM
//} // END IF
//IF( SCALE.NE.ONE ) THEN; //IF( SCALE.NE.ONE ) THEN
//CALL DSCAL( N, SCALE, D, 1 ); //CALL DSCAL( N, SCALE, D, 1 )
//CALL DSCAL( N-1, SCALE, E, 1 ); //CALL DSCAL( N-1, SCALE, E, 1 )
//TNRM = TNRM*SCALE; //TNRM = TNRM*SCALE
//IF( VALEIG ) THEN; //IF( VALEIG ) THEN
//WL = WL*SCALE; //WL = WL*SCALE
//WU = WU*SCALE; //WU = WU*SCALE
//} // ENDIF
//} // END IF
//IF( TRYRAC ) THEN; //IF( TRYRAC ) THEN
//CALL DLARRR( N, D, E, IINFO ); //CALL DLARRR( N, D, E, IINFO )
//ELSE; //ELSE
//IINFO = -1; //IINFO = -1
//} // ENDIF
//IF (IINFO.EQ.0) THEN; //IF (IINFO.EQ.0) THEN
//THRESH = EPS; //THRESH = EPS
//ELSE; //ELSE
//THRESH = -EPS; //THRESH = -EPS
//TRYRAC = .FALSE.; //TRYRAC = .FALSE.
//} // ENDIF
//IF( TRYRAC ) THEN; //IF( TRYRAC ) THEN
//CALL DCOPY(N,D,1,WORK(INDD),1); //CALL DCOPY(N,D,1,WORK(INDD),1)
//} // ENDIF
//DO 5 J = 1, N-1; //DO 5 J = 1, N-1
//WORK( INDE2+J-1 ) = E(J)**2; //WORK( INDE2+J-1 ) = E(J)**2
//5    CONTINUE; //5    CONTINUE
//IF( .NOT.WANTZ ) THEN; //IF( .NOT.WANTZ ) THEN
//RTOL1 = FOUR * EPS; //RTOL1 = FOUR * EPS
//RTOL2 = FOUR * EPS; //RTOL2 = FOUR * EPS
//ELSE; //ELSE
//RTOL1 = SQRT(EPS); //RTOL1 = SQRT(EPS)
//RTOL2 = MAX( SQRT(EPS)*5.0D-3, FOUR * EPS ); //RTOL2 = MAX( SQRT(EPS)*5.0D-3, FOUR * EPS )
//} // ENDIF
//CALL DLARRE( RANGE, N, WL, WU, IIL, IIU, D, E,WORK(INDE2), RTOL1, RTOL2, THRESH, NSPLIT,IWORK( IINSPL ), M, W, WORK( INDERR ),WORK( INDGP ), IWORK( IINDBL ),IWORK( IINDW ), WORK( INDGRS ), PIVMIN,WORK( INDWRK ), IWORK( IINDWK ), IINFO ); //CALL DLARRE( RANGE, N, WL, WU, IIL, IIU, D, E,WORK(INDE2), RTOL1, RTOL2, THRESH, NSPLIT,IWORK( IINSPL ), M, W, WORK( INDERR ),WORK( INDGP ), IWORK( IINDBL ),IWORK( IINDW ), WORK( INDGRS ), PIVMIN,WORK( INDWRK ), IWORK( IINDWK ), IINFO )
//IF( IINFO.NE.0 ) THEN; //IF( IINFO.NE.0 ) THEN
//INFO = 10 + ABS( IINFO ); //INFO = 10 + ABS( IINFO )
//} // RETURN
//} // END IF
//IF( WANTZ ) THEN; //IF( WANTZ ) THEN
//CALL DLARRV( N, WL, WU, D, E,PIVMIN, IWORK( IINSPL ), M,1, M, MINRGP, RTOL1, RTOL2,W, WORK( INDERR ), WORK( INDGP ), IWORK( IINDBL ),IWORK( IINDW ), WORK( INDGRS ), Z, LDZ,ISUPPZ, WORK( INDWRK ), IWORK( IINDWK ), IINFO ); //CALL DLARRV( N, WL, WU, D, E,PIVMIN, IWORK( IINSPL ), M,1, M, MINRGP, RTOL1, RTOL2,W, WORK( INDERR ), WORK( INDGP ), IWORK( IINDBL ),IWORK( IINDW ), WORK( INDGRS ), Z, LDZ,ISUPPZ, WORK( INDWRK ), IWORK( IINDWK ), IINFO )
//IF( IINFO.NE.0 ) THEN; //IF( IINFO.NE.0 ) THEN
//INFO = 20 + ABS( IINFO ); //INFO = 20 + ABS( IINFO )
//} // RETURN
//} // END IF
//ELSE; //ELSE
//DO 20 J = 1, M; //DO 20 J = 1, M
//ITMP = IWORK( IINDBL+J-1 ); //ITMP = IWORK( IINDBL+J-1 )
//W( J ) = W( J ) + E( IWORK( IINSPL+ITMP-1 ) ); //W( J ) = W( J ) + E( IWORK( IINSPL+ITMP-1 ) )
//20      CONTINUE; //20      CONTINUE
//} // END IF
//IF ( TRYRAC ) THEN; //IF ( TRYRAC ) THEN
//IBEGIN = 1; //IBEGIN = 1
//WBEGIN = 1; //WBEGIN = 1
//DO 39  JBLK = 1, IWORK( IINDBL+M-1 ); //DO 39  JBLK = 1, IWORK( IINDBL+M-1 )
//IEND = IWORK( IINSPL+JBLK-1 ); //IEND = IWORK( IINSPL+JBLK-1 )
//IN = IEND - IBEGIN + 1; //IN = IEND - IBEGIN + 1
//WEND = WBEGIN - 1; //WEND = WBEGIN - 1
//36         CONTINUE; //36         CONTINUE
//IF( WEND.LT.M ) THEN; //IF( WEND.LT.M ) THEN
//IF( IWORK( IINDBL+WEND ).EQ.JBLK ) THEN; //IF( IWORK( IINDBL+WEND ).EQ.JBLK ) THEN
//WEND = WEND + 1; //WEND = WEND + 1
//GO TO 36; //GO TO 36
//} // END IF
//} // END IF
//IF( WEND.LT.WBEGIN ) THEN; //IF( WEND.LT.WBEGIN ) THEN
//IBEGIN = IEND + 1; //IBEGIN = IEND + 1
//GO TO 39; //GO TO 39
//} // END IF
//OFFSET = IWORK(IINDW+WBEGIN-1)-1; //OFFSET = IWORK(IINDW+WBEGIN-1)-1
//IFIRST = IWORK(IINDW+WBEGIN-1); //IFIRST = IWORK(IINDW+WBEGIN-1)
//ILAST = IWORK(IINDW+WEND-1); //ILAST = IWORK(IINDW+WEND-1)
//RTOL2 = FOUR * EPS; //RTOL2 = FOUR * EPS
//CALL DLARRJ( IN,WORK(INDD+IBEGIN-1), WORK(INDE2+IBEGIN-1),IFIRST, ILAST, RTOL2, OFFSET, W(WBEGIN),WORK( INDERR+WBEGIN-1 ),WORK( INDWRK ), IWORK( IINDWK ), PIVMIN,TNRM, IINFO ); //CALL DLARRJ( IN,WORK(INDD+IBEGIN-1), WORK(INDE2+IBEGIN-1),IFIRST, ILAST, RTOL2, OFFSET, W(WBEGIN),WORK( INDERR+WBEGIN-1 ),WORK( INDWRK ), IWORK( IINDWK ), PIVMIN,TNRM, IINFO )
//IBEGIN = IEND + 1; //IBEGIN = IEND + 1
//WBEGIN = WEND + 1; //WBEGIN = WEND + 1
//39      CONTINUE; //39      CONTINUE
//} // ENDIF
//IF( SCALE.NE.ONE ) THEN; //IF( SCALE.NE.ONE ) THEN
//CALL DSCAL( M, ONE / SCALE, W, 1 ); //CALL DSCAL( M, ONE / SCALE, W, 1 )
//} // END IF
//IF( NSPLIT.GT.1 ) THEN; //IF( NSPLIT.GT.1 ) THEN
//IF( .NOT. WANTZ ) THEN; //IF( .NOT. WANTZ ) THEN
//CALL DLASRT( 'I', M, W, IINFO ); //CALL DLASRT( 'I', M, W, IINFO )
//IF( IINFO.NE.0 ) THEN; //IF( IINFO.NE.0 ) THEN
//INFO = 3; //INFO = 3
//} // RETURN
//} // END IF
//ELSE; //ELSE
//DO 60 J = 1, M - 1; //DO 60 J = 1, M - 1
//I = 0; //I = 0
//TMP = W( J ); //TMP = W( J )
//DO 50 JJ = J + 1, M; //DO 50 JJ = J + 1, M
//IF( W( JJ ).LT.TMP ) THEN; //IF( W( JJ ).LT.TMP ) THEN
//I = JJ; //I = JJ
//TMP = W( JJ ); //TMP = W( JJ )
//} // END IF
//50            CONTINUE; //50            CONTINUE
//IF( I.NE.0 ) THEN; //IF( I.NE.0 ) THEN
//W( I ) = W( J ); //W( I ) = W( J )
//W( J ) = TMP; //W( J ) = TMP
//IF( WANTZ ) THEN; //IF( WANTZ ) THEN
//CALL DSWAP( N, Z( 1, I ), 1, Z( 1, J ), 1 ); //CALL DSWAP( N, Z( 1, I ), 1, Z( 1, J ), 1 )
//ITMP = ISUPPZ( 2*I-1 ); //ITMP = ISUPPZ( 2*I-1 )
//ISUPPZ( 2*I-1 ) = ISUPPZ( 2*J-1 ); //ISUPPZ( 2*I-1 ) = ISUPPZ( 2*J-1 )
//ISUPPZ( 2*J-1 ) = ITMP; //ISUPPZ( 2*J-1 ) = ITMP
//ITMP = ISUPPZ( 2*I ); //ITMP = ISUPPZ( 2*I )
//ISUPPZ( 2*I ) = ISUPPZ( 2*J ); //ISUPPZ( 2*I ) = ISUPPZ( 2*J )
//ISUPPZ( 2*J ) = ITMP; //ISUPPZ( 2*J ) = ITMP
//} // END IF
//} // END IF
//60         CONTINUE; //60         CONTINUE
//} // END IF
//} // ENDIF
//WORK( 1 ) = LWMIN; //WORK( 1 ) = LWMIN
//IWORK( 1 ) = LIWMIN; //IWORK( 1 ) = LIWMIN
//} // RETURN
} // END